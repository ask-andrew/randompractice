{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import'./App.css';import PromptDisplay from'./components/PromptDisplay';import Controls from'./components/Controls';import RhythmVisualizer from'./components/RhythmVisualizer';// Will be used now\nimport{getRandomKey}from'./data/keys';import{getRandomNoteMaterial}from'./data/noteMaterials';import{getRandomRhythmicPhrase}from'./data/rhythmicPhrases';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[currentKey,setCurrentKey]=useState('');const[currentNoteMaterial,setCurrentNoteMaterial]=useState('');const[currentRhythm,setCurrentRhythm]=useState(null);// { id, text, measureLength, notationSpec }\nconst[currentMeasureLength,setCurrentMeasureLength]=useState(\"1\");// Default to 1 measure\nconst[lockedKey,setLockedKey]=useState(false);const[lockedNoteMaterial,setLockedNoteMaterial]=useState(false);const[lockedRhythm,setLockedRhythm]=useState(false);const generatePrompt=useCallback(()=>{if(!lockedKey){setCurrentKey(getRandomKey());}if(!lockedNoteMaterial){setCurrentNoteMaterial(getRandomNoteMaterial());}if(!lockedRhythm){// Pass currentMeasureLength to get a rhythm of the appropriate length\nsetCurrentRhythm(getRandomRhythmicPhrase(parseInt(currentMeasureLength)));}},[lockedKey,lockedNoteMaterial,lockedRhythm,currentMeasureLength]);// Generate initial prompt on mount\nuseEffect(()=>{generatePrompt();},[generatePrompt]);const handleShuffleKey=()=>{if(!lockedKey)setCurrentKey(getRandomKey());};const handleShuffleNote=()=>{if(!lockedNoteMaterial)setCurrentNoteMaterial(getRandomNoteMaterial());};const handleShuffleRhythm=()=>{if(!lockedRhythm)setCurrentRhythm(getRandomRhythmicPhrase(parseInt(currentMeasureLength)));};const handleMeasureLengthChange=event=>{const newLength=event.target.value;setCurrentMeasureLength(newLength);// If rhythm is not locked, regenerate it with the new length\nif(!lockedRhythm){setCurrentRhythm(getRandomRhythmicPhrase(parseInt(newLength)));}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"App-header\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"\\uD83C\\uDFB7 Saxophone Practice Prompts \\uD83C\\uDFB6\"})}),/*#__PURE__*/_jsxs(\"main\",{children:[/*#__PURE__*/_jsx(Controls,{onShuffleKey:handleShuffleKey,onShuffleNote:handleShuffleNote,onShuffleRhythm:handleShuffleRhythm,onLockKey:()=>setLockedKey(!lockedKey),onLockNote:()=>setLockedNoteMaterial(!lockedNoteMaterial),onLockRhythm:()=>setLockedRhythm(!lockedRhythm),lockedKey:lockedKey,lockedNote:lockedNoteMaterial,lockedRhythm:lockedRhythm,onMeasureLengthChange:handleMeasureLengthChange,currentMeasureLength:currentMeasureLength}),/*#__PURE__*/_jsx(PromptDisplay,{keyName:currentKey,noteMaterial:currentNoteMaterial,rhythmText:currentRhythm?currentRhythm.text:'N/A'}),/*#__PURE__*/_jsx(RhythmVisualizer,{abcString:currentRhythm?currentRhythm.notationSpec:null// measureLength is implicitly handled by the abcString for abcjs for rendering,\n// but might be useful if visualizer needed to adjust display based on it.\n// For now, the abcString itself contains the full multi-measure notation if applicable.\n,measureLength:currentRhythm?currentRhythm.measureLength:parseInt(currentMeasureLength)})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","PromptDisplay","Controls","RhythmVisualizer","getRandomKey","getRandomNoteMaterial","getRandomRhythmicPhrase","jsx","_jsx","jsxs","_jsxs","App","currentKey","setCurrentKey","currentNoteMaterial","setCurrentNoteMaterial","currentRhythm","setCurrentRhythm","currentMeasureLength","setCurrentMeasureLength","lockedKey","setLockedKey","lockedNoteMaterial","setLockedNoteMaterial","lockedRhythm","setLockedRhythm","generatePrompt","parseInt","handleShuffleKey","handleShuffleNote","handleShuffleRhythm","handleMeasureLengthChange","event","newLength","target","value","className","children","onShuffleKey","onShuffleNote","onShuffleRhythm","onLockKey","onLockNote","onLockRhythm","lockedNote","onMeasureLengthChange","keyName","noteMaterial","rhythmText","text","abcString","notationSpec","measureLength"],"sources":["/Users/andrewledet/randompractice/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport PromptDisplay from './components/PromptDisplay';\nimport Controls from './components/Controls';\nimport RhythmVisualizer from './components/RhythmVisualizer'; // Will be used now\n\nimport { getRandomKey } from './data/keys';\nimport { getRandomNoteMaterial } from './data/noteMaterials';\nimport { getRandomRhythmicPhrase } from './data/rhythmicPhrases';\n\nfunction App() {\n  const [currentKey, setCurrentKey] = useState('');\n  const [currentNoteMaterial, setCurrentNoteMaterial] = useState('');\n  const [currentRhythm, setCurrentRhythm] = useState(null); // { id, text, measureLength, notationSpec }\n  const [currentMeasureLength, setCurrentMeasureLength] = useState(\"1\"); // Default to 1 measure\n\n  const [lockedKey, setLockedKey] = useState(false);\n  const [lockedNoteMaterial, setLockedNoteMaterial] = useState(false);\n  const [lockedRhythm, setLockedRhythm] = useState(false);\n\n  const generatePrompt = useCallback(() => {\n    if (!lockedKey) {\n      setCurrentKey(getRandomKey());\n    }\n    if (!lockedNoteMaterial) {\n      setCurrentNoteMaterial(getRandomNoteMaterial());\n    }\n    if (!lockedRhythm) {\n      // Pass currentMeasureLength to get a rhythm of the appropriate length\n      setCurrentRhythm(getRandomRhythmicPhrase(parseInt(currentMeasureLength)));\n    }\n  }, [lockedKey, lockedNoteMaterial, lockedRhythm, currentMeasureLength]);\n\n  // Generate initial prompt on mount\n  useEffect(() => {\n    generatePrompt();\n  }, [generatePrompt]);\n\n  const handleShuffleKey = () => {\n    if (!lockedKey) setCurrentKey(getRandomKey());\n  };\n\n  const handleShuffleNote = () => {\n    if (!lockedNoteMaterial) setCurrentNoteMaterial(getRandomNoteMaterial());\n  };\n\n  const handleShuffleRhythm = () => {\n    if (!lockedRhythm) setCurrentRhythm(getRandomRhythmicPhrase(parseInt(currentMeasureLength)));\n  };\n\n  const handleMeasureLengthChange = (event) => {\n    const newLength = event.target.value;\n    setCurrentMeasureLength(newLength);\n    // If rhythm is not locked, regenerate it with the new length\n    if (!lockedRhythm) {\n      setCurrentRhythm(getRandomRhythmicPhrase(parseInt(newLength)));\n    }\n  };\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>ðŸŽ· Saxophone Practice Prompts ðŸŽ¶</h1>\n      </header>\n      <main>\n        <Controls\n          onShuffleKey={handleShuffleKey}\n          onShuffleNote={handleShuffleNote}\n          onShuffleRhythm={handleShuffleRhythm}\n          onLockKey={() => setLockedKey(!lockedKey)}\n          onLockNote={() => setLockedNoteMaterial(!lockedNoteMaterial)}\n          onLockRhythm={() => setLockedRhythm(!lockedRhythm)}\n          lockedKey={lockedKey}\n          lockedNote={lockedNoteMaterial}\n          lockedRhythm={lockedRhythm}\n          onMeasureLengthChange={handleMeasureLengthChange}\n          currentMeasureLength={currentMeasureLength}\n        />\n        <PromptDisplay\n          keyName={currentKey}\n          noteMaterial={currentNoteMaterial}\n          rhythmText={currentRhythm ? currentRhythm.text : 'N/A'}\n        />\n        <RhythmVisualizer \n          abcString={currentRhythm ? currentRhythm.notationSpec : null}\n          // measureLength is implicitly handled by the abcString for abcjs for rendering,\n          // but might be useful if visualizer needed to adjust display based on it.\n          // For now, the abcString itself contains the full multi-measure notation if applicable.\n          measureLength={currentRhythm ? currentRhythm.measureLength : parseInt(currentMeasureLength)}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}